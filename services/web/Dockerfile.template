###############
# Build stage #
###############
FROM balenalib/%%BALENA_ARCH%%-alpine:latest-build as build

WORKDIR /app

RUN apk add --no-cache \
  build-base \
  git \
  postgresql-dev \
  # Required by node-sass (webpacker dependency)
  python2 \
  ruby-dev \
  ruby-bundler \
  # Required by activesupport (assets:precompile)
  ruby-json \
  # For assets:precompile: Timezone information
  tzdata \
  yarn \
  # For nokogiri gem
  zlib-dev

# Copy only files for bundle/yarn install first (layer does not change as often)
COPY Gemfile .
COPY Gemfile.lock .
COPY package.json .
COPY yarn.lock .

# Fix sassc-ruby build on ARM
RUN bundle config --local build.sassc --disable-march-tune-native

RUN bundle install --jobs 4 --without development test --no-cache --deployment \
# https://www.georg-ledermann.de/blog/2018/04/19/dockerize-rails-the-lean-way/
  && rm -rf vendor/bundle/cache/*.gem \
  && find vendor/bundle/gems/ -name "*.c" -delete || true \
  && find vendor/bundle/gems/ -name "*.o" -delete || true

# Manually run yarn install before copying all sources (layer does not change as often)
# Ignore warnings about balena-cli. yarn install --production also resolves dev dependencies, but doesn't install them).
RUN yarn install --production --frozen-lockfile

COPY . .

ENV RAILS_ENV=production

# Do not require master key and use fake secret key base (https://github.com/rails/rails/issues/32947#issuecomment-531508722)
RUN REQUIRE_MASTER_KEY=false SECRET_KEY_BASE=1 bundle exec rails assets:precompile

# Remove folders not needed in resulting image
RUN rm -rf node_modules tmp/cache vendor/assets lib/assets spec


#############
# Run stage #
#############
FROM balenalib/%%BALENA_ARCH%%-alpine:latest-run
LABEL maintainer="f@ftes.de"

WORKDIR /app

RUN apk add --no-cache \
  postgresql-dev \
  ruby \
  # Required for db:create etc.
  ruby-bundler \
  # Required by activesupport
  ruby-json \
  # Timezone information
  tzdata

COPY --from=build /app .

# Remove "build" group gems (sassc)
RUN bundle install --jobs 4 --without development test build --no-cache --deployment --clean \
# https://www.georg-ledermann.de/blog/2018/04/19/dockerize-rails-the-lean-way/
  && rm -rf vendor/bundle/cache/*.gem \
  && find vendor/bundle/gems/ -name "*.c" -delete || true \
  && find vendor/bundle/gems/ -name "*.o" -delete || true

ENV RAILS_ENV=production
# TODO Add nginx container as reverse proxy for static files
ENV RAILS_SERVE_STATIC_FILES=true
ENV RAILS_LOG_TO_STDOUT=true

COPY entrypoint.sh /usr/bin/
RUN chmod +x /usr/bin/entrypoint.sh
ENTRYPOINT ["entrypoint.sh"]

EXPOSE 80

# TODO puma
CMD ["/bin/sh", "-c", "bundle exec rails server -b 0.0.0.0 -p ${PORT:-80}"]
