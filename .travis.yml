# CC_TEST_REPORTER_ID env var configured via Travis UI

# Helpful links
# https://docs.travis-ci.com/user/build-stages/matrix-expansion/
# https://docs.travis-ci.com/user/build-stages/using-yaml-aliases/
# https://docs.travis-ci.com/user/multi-cpu-architectures/
# https://docs.travis-ci.com/user/build-stages/share-docker-image/
# https://docs.travis-ci.com/user/docker/#pushing-a-docker-image-to-a-registry
# https://docs.travis-ci.com/user/deployment/heroku/

os: linux

# Don't use top-level `arch` field. Different languages cannot be added to the build matrix but must be specified
# via jobs.include anyway.

# TODO heroku release on success
# TODO python test and combine code coverage before reporting https://docs.travis-ci.com/user/build-stages/share-files-s3/
# TODO remove codefresh config files and project
# TODO un-dockerize build/balena-cli

stages:
  - test
  - build
  - name: deploy
    if: branch = master

services:
  - docker

jobs:
  # Do not wait for deploy jobs (allow_failures: true)
  fast_finish: true
  allow_failures:
    - stage: deploy

  include:
    # Test services/web
    - &test-web
      name: Test services/web (amd64)
      arch: amd64
      language: ruby
      rvm: 2.5.7
      env:
        - RAILS_ENV=test
      cache:
        yarn: true # $HOME/.cache/yarn
        directories:
          - $HOME/.rvm # Probably already the case with `language: ruby`
          - $HOME/.nvm
          - $HOME/.npm
          - services/web/node_modules
          - services/web/vendor/bundle # bundler cache
          - services/web/tmp/cache # rails cache
          - services/web/public/assets
          - services/web/public/packs
          - services/web/public/packs-test
      before_install:
        # Install codeclimate test reporter if not present
        - cd services/web
        # update to bundler 2.0 https://docs.travis-ci.com/user/languages/ruby/#bundler-20
        - gem install bundler
        - nvm install node
        - nvm use node
        # Install yarn if not present
        - curl -o- -L https://yarnpkg.com/install.sh | bash
        - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter && chmod +x ./cc-test-reporter
      install:
        - bundler install --jobs 4 --without development production --deployment
        - yarn install --production --frozen-lockfile
      before_script:
        # precompile for (hopefully) better speed when executing. Does this help with caching?
        - REQUIRE_MASTER_KEY=false SECRET_KEY_BASE=1 bundle exec rails assets:precompile
        - bundle exec rails db:migrate
      script:
        - ./cc-test-reporter before-build
        - bundle exec rails test
        - ./cc-test-reporter format-coverage --add-prefix services/web/
        - ./cc-test-reporter upload-coverage
     # Won't perform tests on ARM for now
     #- <<: *test-web
     #  arch: arm64

    # Build services/web docker images
    - &build-docker-image
      name: Build services/web docker image and push if branch=master (amd64)
      env: SERVICE=web
      stage: build
      arch: amd64
      language: minimal
      before_install:
        - ./bin/docker-template
        - cd services/$SERVICE
      script:
        # Warm up docker cache
        - docker pull ftes/clickr-rails-$SERVICE-$TRAVIS_CPU_ARCH || true
        - docker build -t ftes/clickr-rails-$SERVICE-$TRAVIS_CPU_ARCH --cache-from ftes/clickr-rails-web-$TRAVIS_CPU_ARCH .
      deploy:
        on:
          branch: master
        provider: script
        script: bash ../../bin/docker-push ftes/clickr-rails-$SERVICE-$TRAVIS_CPU_ARCH
    - <<: *build-docker-image
      name: Build services/web docker image and push if branch=master (arm64)
      arch: arm64
      before_install:
        # TODO Use balena base images
        - ./bin/docker-template arm64v8/alpine:latest arm64v8/python:3-alpine
        - cd services/$SERVICE

    # Build services/rfid-keyboard-reader docker images
    - <<: *build-docker-image
      name: Build services/rfid-keyboard-reader docker image and push if branch=master (amd64)
      env: SERVICE=rfid-keyboard-reader
    - <<: *build-docker-image
      name: Build services/rfid-keyboard-reader docker image and push if branch=master (arm64)
      env: SERVICE=rfid-keyboard-reader
      arch: arm64
      before_install:
        # TODO Use balena base images
        - ./bin/docker-template arm64v8/alpine:latest arm64v8/python:3-alpine
        - cd services/$SERVICE

    # Build and deploy using balena cloud
    # https://github.com/balena-io-playground/balena-travis-test
    - name: Deploy everything to balena
      stage: deploy
      language: minimal
      script:
        - git fetch --unshallow
        - eval "$(ssh-agent -s)" #start the ssh agent
        - echo -e $BALENA_SSH_KEY > id_rsa
        - chmod 0600 id_rsa
        - ssh-add ./id_rsa
        - cat build/balena-cli/git.balena-cloud.com.ssh-keyscan >> ~/.ssh/known_hosts
        - git remote add balena $BALENA_REMOTE
        - git push balena master

    # Deploy services/web to heroku
    - name: Deploy services/web to heroku
      stage: deploy
      language: minimal
      script:
        - docker pull ftes/clickr-rails-web-amd64
        - docker login --username=_ --password=$HEROKU_TOKEN registry.heroku.com
        - docker tag ftes/clickr-rails-web-amd64 registry.heroku.com/clickr-rails/web
        - docker push registry.heroku.com/clickr-rails/web
        - bin/heroku-release "`docker inspect ftes/clickr-rails-web-amd64 --format={{.Id}}`"
